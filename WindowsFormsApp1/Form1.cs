using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;


namespace WindowsFormsApp1
{
    public partial class Form1 : Form
    {
        //Helper Functions
        public string multilineToSinglelineFunc(string inputString)
        {
            /* Purpose:
            *  convert multiline string into single line
            *  and change double space "  " into single " "
            * Paramaters:
            *  inputString: a string to convert to single line
            * Return Value:
            *  return the modified string
            */
            //convert multiline string into single line
            inputString = inputString.Replace(Environment.NewLine, " ");
            inputString = inputString.Replace("\r\n", " ");
            inputString = inputString.Replace("  ", " ");
            return inputString;
        }
        public string openFileFunc(string pathToFile)
        {
            /* Purpose:
            *  this function will open a file and read it's contents
            * Paramaters:
            *  pathToFile: a windows file path
            * Return Value:
            *  return the opened files contents as a string
            */
            String line;
            string output = "";
            try
            {
                //Pass the file path and file name to the StreamReader constructor
                StreamReader file = new StreamReader(pathToFile);
                //Read the first line of text
                line = file.ReadLine();
                //Continue to read until you reach end of file
                while (line != null)
                {
                    output += line;
                    output += Environment.NewLine;
                    //Read the next line
                    line = file.ReadLine();
                }
                //close the file
                file.Close();
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception: " + e.Message);
            }
            return output;
        }
        public string findAndReplaceFunc(string data, string toSearch, string replaceStr)
        {
            /* Purpose:
             *  this function will find and replace part of a string
             * Paramaters:
             *  data: a string to be manipulated (does not work with multiline strings)
             *  toSearch: a string of the data you want to find
             *  replaceStr: the text you want to replace the toSearch text with
             * Return Value:
             *  returns the modified string if data.length > 0
             *  returns data if no data provided
             */
            //StringBuilder has a Replace() function built in, strings do not
            if (data.Length != 0)
            {
                StringBuilder builder = new StringBuilder(data);
                toSearch = multilineToSinglelineFunc(toSearch);
                replaceStr = multilineToSinglelineFunc(replaceStr);
                builder.Replace(toSearch, replaceStr);
                string tempData = builder.ToString();
                return tempData;
            }
            //if no data, return no data
            return data;
        }

        public void writeToFile(string pathToFile, string data)
        {
            /* Purpose:
            *  this function will write data to a file
            * Paramaters:
            *  pathToFile: a windows file path
            *  data: the data you wish to write to the file
            * Return Value:
            *  none
            */
            StreamWriter file = new StreamWriter(pathToFile);
            file.Write(data);
            file.Close();
        }

        public void callAllFileFuncs(string pathToFile, string toSearch, string replaceStr)
        {
            /* Purpose:
           *  this function will call openFileFunc(), findAndReplaceFunc(), writeToFileFunc()
           * Paramaters:
           *  pathToFile: a windows file path
           *  toSearch: a string of the data you want to find
           *  replaceStr: the text you want to replace the toSearch text with
           * Return Value:
           *  none
           */
            string fileText;
            //get the file text
            fileText = openFileFunc(pathToFile);
            string editedText;
            //find and replace
            editedText = findAndReplaceFunc(fileText, toSearch, replaceStr);
            //write edited data back to the file
            writeToFile(pathToFile, editedText);
 
        }
        //Form1
        public Form1()
        {
            InitializeComponent();
        }
        //tracks which tweak is using checkBox1, set inside treeView1_AfterSelect method
        int tweak = 0;
        string modDirectory = "C:\\git_local"; //default value for testing
        //this function handles mouse clicks on the treeView1
        private void treeView1_AfterSelect(object sender, TreeViewEventArgs e)
        {
            //checkBox1 is only visible as needed
            checkBox1.Visible = false;
            //check which child node (menu item) has been clicked on
            //then update richTextBox1 text
            if (e.Node.Text == "Spawn Rate")
            {
                //select richTextBox1 gui item and add text
                //@ in front a string creates a multiline string
                richTextBox1.Text = (@"To change the chances of capturing unique spawn leaders and lords, and remove the predetermined chances - credits to VonDegurechaff and Vetrogor
                                    Every 120 hours, a random value between 0 and 100(0...99) gets rolled and saved, let's call it 'x'. Once you defeat a unique spawn, the leader will be captured if x + (prisoner_management_skill * 5) >= 60. In case of lords, the value 'x' is rolled after each battle per lord, so the chance to capture them isn't prerolled." +
                                    "Regardless of the outcome of trying to capture a unique spawn leader, x gets immediately reset to a random value between 0 and 100.This is only done if you participate in that battle, not if some lords wreck the spawn without you. So if you never battle any spawn, that value 'x' is only rerolled every 5 days.If you beat up one however, regardless of having actually captured the spawn-leader or not, the value is rolled again, independently of the usual 5 - day cycle.It is also worth to note that if either Ithilrandir or Aeldarian is present in a battle against another unique spawn, then 'x' is replaced with straight - 100, meaning that unique spawns leaders will always escape after such fights.With this tweak, we can sort of bypass that penalty.");
            }
            if (e.Node.Text == "Order Stronghold")
            {
                //update text of richTextBox1
                richTextBox1.Text = ("This tweak will allow you to garrison troops into the Stronghold, or to take them out. As of v3.9.4, due to the Hideout feature, you'll have to pay 75% of the wages of the garrison once you've touched it (added or removed a troop), as well as an extra of 500 denars for the upkeep of the crew in there. At least the Order Stronghold will never be attacked, so your troops will always be safe there.");
                checkBox1.Visible = true;
                checkBox1.Text = "Enable tweak";
                tweak = 1;
                
            }
            if (e.Node.Text == "Reduce upgrade time")
            {
                //update text of richTextBox1
                richTextBox1.Text = (@"To change the upgrade times of Alexios of Melitine - credits to il_22113, VonDegurechaff and Fandom User (anonymous)
                                    This tweak will make everything take half (1/2) upgrade time.");
                checkBox1.Visible = true;
                checkBox1.Text = "Enable tweak";
                tweak = 2;

            }
        }


        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            //if checkBox1 is checked
            if (checkBox1.Checked)
            {
                //check which tweak is used
                if (tweak == 1)
                {
                    callAllFileFuncs(modDirectory + "\\test.txt", "Writing text a file.", "Changing the text of a file.");
                }
                if (tweak == 2)
                {
                    string textToSearch = "dlga_order_blacksmith_1:order_blacksmith_2 1196 1850  271 1541 3 144115188075857208 360287970189639680 144115188075855914 1542 3 1224979098644774912 360287970189639680 144115188075855914 1570 2 1224979098644774913 144115188075857208 4 0 30 2 144115188075855914 4 4 0 2725 2 144115188075857208 29 4 0 31 2 1224979098644774912 27 2133 2 144115188075857209 29 2320 2 9 1585267068834417721 2133 2 144115188075857206 50 5 0 1073741855 2 1224979098644774912 0 1073741855 2 1224979098644774912 28 31 2 1224979098644774912 25 2133 2 144115188075857209 27 2320 2 9 1585267068834417722 2133 2 144115188075857206 30 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 20 3 0 5 0 2725 2 144115188075857208 26 4 0 31 2 1224979098644774912 25 2133 2 144115188075857209 26 2320 2 9 1585267068834417721 2133 2 144115188075857206 50 5 0 1073741855 2 1224979098644774912 0 1073741855 2 1224979098644774912 28 31 2 1224979098644774912 24 2133 2 144115188075857209 25 2320 2 9 1585267068834417722 2133 2 144115188075857206 30 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 20 3 0 3 0 4 0 31 2 144115188075855914 5 2105 2 144115188075857206 30 3 0 5 0 31 2 1224979098644774913 7 4 0 31 2 1224979098644774912 25 2133 2 144115188075857209 27 2320 2 9 1585267068834417721 2133 2 144115188075857206 20 5 0 31 2 1224979098644774912 0 2133 2 144115188075857209 25 2320 2 9 1585267068834417722 2133 2 144115188075857206 15 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 10 3 0 5 0 1073741855 2 1224979098644774913 5 1073741855 2 1224979098644774913 18 31 2 1224979098644774913 6 4 0 31 2 1224979098644774912 0 2133 2 144115188075857209 42 2320 2 9 1585267068834417724 2133 2 144115188075857206 20 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 10 3 0 4 0 31 2 1224979098644774913 18 2105 2 144115188075857206 20 3 0 5 0 1073741855 2 1224979098644774913 17 31 2 1224979098644774913 9 4 0 31 2 1224979098644774912 10 2133 2 144115188075857209 17 2320 2 9 1585267068834417721 2133 2 144115188075857206 50 5 0 31 2 1224979098644774912 0 2133 2 144115188075857209 10 2320 2 9 1585267068834417722 2133 2 144115188075857206 30 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 20 3 0 4 0 31 2 1224979098644774913 17 2105 2 144115188075857206 30 3 0 5 0 31 2 1224979098644774913 8 4 0 31 2 1224979098644774912 19 2133 2 144115188075857209 17 2320 2 9 1585267068834417721 2133 2 144115188075857206 50 5 0 1073741855 2 1224979098644774912 0 31 2 1224979098644774912 10 2133 2 144115188075857209 19 2320 2 9 1585267068834417722 2133 2 144115188075857206 30 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 20 3 0 5 0 31 2 1224979098644774913 10 4 0 1073741855 2 1224979098644774912 18 31 2 1224979098644774912 13 2133 2 144115188075857209 42 2320 2 9 1585267068834417725 2133 2 144115188075857206 20 5 0 31 2 1224979098644774912 0 2133 2 144115188075857209 13 2320 2 9 1585267068834417722 2133 2 144115188075857206 15 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 10 3 0 5 0 31 2 1224979098644774913 4 4 0 2725 2 144115188075857208 17 4 0 31 2 1224979098644774912 18 2133 2 144115188075857209 17 2320 2 9 1585267068834417721 2133 2 144115188075857206 50 5 0 31 2 1224979098644774912 0 2133 2 144115188075857209 18 2320 2 9 1585267068834417722 2133 2 144115188075857206 30 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 20 3 0 5 0 2725 2 144115188075857208 13 4 0 31 2 1224979098644774912 10 2133 2 144115188075857209 13 2320 2 9 1585267068834417721 2133 2 144115188075857206 50 5 0 31 2 1224979098644774912 0 2133 2 144115188075857209 10 2320 2 9 1585267068834417722 2133 2 144115188075857206 30 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 20 3 0 3 0 5 0 1073741855 2 1224979098644774913 2 31 2 1224979098644774913 3 4 0 2725 2 144115188075857208 17 2725 2 144115188075857208 18 4 0 1073741855 2 1224979098644774912 13 31 2 1224979098644774912 18 2133 2 144115188075857209 17 2320 2 9 1585267068834417721 2133 2 144115188075857206 50 5 0 31 2 1224979098644774912 0 4 0 2725 2 144115188075857208 13 2133 2 144115188075857209 13 5 0 2133 2 144115188075857209 18 3 0 2320 2 9 1585267068834417722 2133 2 144115188075857206 30 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 20 3 0 5 0 2725 2 144115188075857208 18 4 0 31 2 1224979098644774912 10 2133 2 144115188075857209 18 2320 2 9 1585267068834417721 2133 2 144115188075857206 5 5 0 31 2 1224979098644774912 0 2133 2 144115188075857209 10 2320 2 9 1585267068834417722 2133 2 144115188075857206 5 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 5 3 0 5 0 2725 2 144115188075857208 17 2725 2 144115188075857208 14 4 0 1073741855 2 1224979098644774912 13 31 2 1224979098644774912 14 2133 2 144115188075857209 17 2320 2 9 1585267068834417721 2133 2 144115188075857206 50 5 0 1073741855 2 1224979098644774912 10 1073741855 2 1224979098644774912 16 31 2 1224979098644774912 0 2136 3 1224979098644774914 0 100 4 0 2147483678 2 1224979098644774914 50 2133 2 144115188075857209 13 5 0 2133 2 144115188075857209 14 3 0 2320 2 9 1585267068834417722 2133 2 144115188075857206 30 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 20 3 0 5 0 2725 2 144115188075857208 14 4 0 31 2 1224979098644774912 13 2133 2 144115188075857209 14 2320 2 9 1585267068834417721 2133 2 144115188075857206 20 5 0 1073741855 2 1224979098644774912 10 31 2 1224979098644774912 0 2133 2 144115188075857209 13 2320 2 9 1585267068834417722 2133 2 144115188075857206 30 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 20 3 0 3 0 3 0 2325 2 10 144115188075857208 2133 2 72057594037927937 144115188075857206 Let_me_take_a_look..._Hmm,_your_{s10}_{s9}.^I'll_need_{reg1}_days_to_work_in_my_enhancements._Would_that_be_convenient_for_you_Grandmaster?  1851  0 NO_VOICEOVER";
                    string textToReplace = "dlga_order_blacksmith_1:order_blacksmith_2 1196 1850  271 1541 3 144115188075857208 360287970189639680 144115188075855914 1542 3 1224979098644774912 360287970189639680 144115188075855914 1570 2 1224979098644774913 144115188075857208 4 0 30 2 144115188075855914 4 4 0 2725 2 144115188075857208 29 4 0 31 2 1224979098644774912 27 2133 2 144115188075857209 29 2320 2 9 1585267068834417721 2133 2 144115188075857206 25 5 0 1073741855 2 1224979098644774912 0 1073741855 2 1224979098644774912 28 31 2 1224979098644774912 25 2133 2 144115188075857209 27 2320 2 9 1585267068834417722 2133 2 144115188075857206 15 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 10 3 0 5 0 2725 2 144115188075857208 26 4 0 31 2 1224979098644774912 25 2133 2 144115188075857209 26 2320 2 9 1585267068834417721 2133 2 144115188075857206 25 5 0 1073741855 2 1224979098644774912 0 1073741855 2 1224979098644774912 28 31 2 1224979098644774912 24 2133 2 144115188075857209 25 2320 2 9 1585267068834417722 2133 2 144115188075857206 15 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 10 3 0 3 0 4 0 31 2 144115188075855914 5 2105 2 144115188075857206 15 3 0 5 0 31 2 1224979098644774913 7 4 0 31 2 1224979098644774912 25 2133 2 144115188075857209 27 2320 2 9 1585267068834417721 2133 2 144115188075857206 10 5 0 31 2 1224979098644774912 0 2133 2 144115188075857209 25 2320 2 9 1585267068834417722 2133 2 144115188075857206 8 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 5 3 0 5 0 1073741855 2 1224979098644774913 5 1073741855 2 1224979098644774913 18 31 2 1224979098644774913 6 4 0 31 2 1224979098644774912 0 2133 2 144115188075857209 42 2320 2 9 1585267068834417724 2133 2 144115188075857206 10 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 5 3 0 4 0 31 2 1224979098644774913 18 2105 2 144115188075857206 10 3 0 5 0 1073741855 2 1224979098644774913 17 31 2 1224979098644774913 9 4 0 31 2 1224979098644774912 10 2133 2 144115188075857209 17 2320 2 9 1585267068834417721 2133 2 144115188075857206 25 5 0 31 2 1224979098644774912 0 2133 2 144115188075857209 10 2320 2 9 1585267068834417722 2133 2 144115188075857206 15 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 10 3 0 4 0 31 2 1224979098644774913 17 2105 2 144115188075857206 15 3 0 5 0 31 2 1224979098644774913 8 4 0 31 2 1224979098644774912 19 2133 2 144115188075857209 17 2320 2 9 1585267068834417721 2133 2 144115188075857206 25 5 0 1073741855 2 1224979098644774912 0 31 2 1224979098644774912 10 2133 2 144115188075857209 19 2320 2 9 1585267068834417722 2133 2 144115188075857206 15 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 10 3 0 5 0 31 2 1224979098644774913 10 4 0 1073741855 2 1224979098644774912 18 31 2 1224979098644774912 13 2133 2 144115188075857209 42 2320 2 9 1585267068834417725 2133 2 144115188075857206 10 5 0 31 2 1224979098644774912 0 2133 2 144115188075857209 13 2320 2 9 1585267068834417722 2133 2 144115188075857206 8 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 5 3 0 5 0 31 2 1224979098644774913 4 4 0 2725 2 144115188075857208 17 4 0 31 2 1224979098644774912 18 2133 2 144115188075857209 17 2320 2 9 1585267068834417721 2133 2 144115188075857206 25 5 0 31 2 1224979098644774912 0 2133 2 144115188075857209 18 2320 2 9 1585267068834417722 2133 2 144115188075857206 15 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 10 3 0 5 0 2725 2 144115188075857208 13 4 0 31 2 1224979098644774912 10 2133 2 144115188075857209 13 2320 2 9 1585267068834417721 2133 2 144115188075857206 25 5 0 31 2 1224979098644774912 0 2133 2 144115188075857209 10 2320 2 9 1585267068834417722 2133 2 144115188075857206 15 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 10 3 0 3 0 5 0 1073741855 2 1224979098644774913 2 31 2 1224979098644774913 3 4 0 2725 2 144115188075857208 17 2725 2 144115188075857208 18 4 0 1073741855 2 1224979098644774912 13 31 2 1224979098644774912 18 2133 2 144115188075857209 17 2320 2 9 1585267068834417721 2133 2 144115188075857206 25 5 0 31 2 1224979098644774912 0 4 0 2725 2 144115188075857208 13 2133 2 144115188075857209 13 5 0 2133 2 144115188075857209 18 3 0 2320 2 9 1585267068834417722 2133 2 144115188075857206 15 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 10 3 0 5 0 2725 2 144115188075857208 18 4 0 31 2 1224979098644774912 10 2133 2 144115188075857209 18 2320 2 9 1585267068834417721 2133 2 144115188075857206 3 5 0 31 2 1224979098644774912 0 2133 2 144115188075857209 10 2320 2 9 1585267068834417722 2133 2 144115188075857206 3 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 3 3 0 5 0 2725 2 144115188075857208 17 2725 2 144115188075857208 14 4 0 1073741855 2 1224979098644774912 13 31 2 1224979098644774912 14 2133 2 144115188075857209 17 2320 2 9 1585267068834417721 2133 2 144115188075857206 25 5 0 1073741855 2 1224979098644774912 10 1073741855 2 1224979098644774912 16 31 2 1224979098644774912 0 2136 3 1224979098644774914 0 100 4 0 2147483678 2 1224979098644774914 50 2133 2 144115188075857209 13 5 0 2133 2 144115188075857209 14 3 0 2320 2 9 1585267068834417722 2133 2 144115188075857206 15 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 10 3 0 5 0 2725 2 144115188075857208 14 4 0 31 2 1224979098644774912 13 2133 2 144115188075857209 14 2320 2 9 1585267068834417721 2133 2 144115188075857206 10 5 0 1073741855 2 1224979098644774912 10 31 2 1224979098644774912 0 2133 2 144115188075857209 13 2320 2 9 1585267068834417722 2133 2 144115188075857206 15 5 0 2133 2 144115188075857209 0 2320 2 9 1585267068834417723 2133 2 144115188075857206 10 3 0 3 0 3 0 2325 2 10 144115188075857208 2133 2 72057594037927937 144115188075857206 Let_me_take_a_look..._Hmm,_your_{s10}_{s9}.^I'll_need_{reg1}_days_to_work_in_my_enhancements._Would_that_be_convenient_for_you_Grandmaster?  1851  0 NO_VOICEOVER";
                    //stringbuilder.replace seems to only work with single line strings, not multiline??
                    callAllFileFuncs(modDirectory + "\\conversation.txt", textToSearch, textToReplace);
                }
            }
        }


        private void selectDirectoryButton_Click(object sender, EventArgs e)
        {
            //this function will 1. open the folder browser 2. save the path to modDirectory
            using (FolderBrowserDialog dlg = new FolderBrowserDialog())
            {
                dlg.Description = "Select a folder";
                if (dlg.ShowDialog() == DialogResult.OK)
                {
                    //store the path
                    modDirectory = dlg.SelectedPath;
                    textBox1.Text = "Current Diretory:" + System.Environment.NewLine + modDirectory;
                    //dynamically readjust textBox1 width
                    Size size = TextRenderer.MeasureText(textBox1.Text, textBox1.Font);
                    textBox1.Width = size.Width;
                }
            }
        }

        private void testTweaksButton_Click(object sender, EventArgs e)
        {
            //test.txt
            callAllFileFuncs(modDirectory + "\\test.txt", @"Writing text to a file.", "Changing the text of a file.");

        }
    }
}
